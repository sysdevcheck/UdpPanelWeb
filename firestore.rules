/**
 * @fileoverview Firestore Security Rules for VPN Configuration Management.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data nested under VPN configurations.
 * VPN configurations and server settings can be read by anyone. Only authenticated users can manage VPN configurations and their associated users.
 *
 * Data Structure:
 * - /vpn_configurations/{vpnConfigurationId}: Stores VPN configuration settings.
 * - /vpn_configurations/{vpnConfigurationId}/users/{userId}: Stores user data associated with a specific VPN configuration.
 * - /server_settings/{serverSettingId}: Stores server settings for VPN configurations.
 *
 * Key Security Decisions:
 * - User listing is allowed only within a specific VPN configuration and only by authenticated users.
 * - Server settings are publicly readable but only manageable by authenticated users.
 * - VPN configurations are publicly readable but only manageable by authenticated users.
 * - Denormalization: The 'User' entity includes the 'vpnConfigurationId' to enable authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all VPN configurations and write access only to authenticated users.
     * @path /vpn_configurations/{vpnConfigurationId}
     * @allow (get, list): Any user can read VPN configurations.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete VPN configurations.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete VPN configurations.
     * @principle Allows read access to all VPN configurations and write access only to authenticated users.
     */
    match /vpn_configurations/{vpnConfigurationId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Enforces user-ownership within a specific VPN configuration.  Authenticated users can manage users only under their VPN configuration.
     * @path /vpn_configurations/{vpnConfigurationId}/users/{userId}
     * @allow (get): Any authenticated user can retrieve a specific user within a VPN configuration.
     * @allow (list): Authenticated user can list users within a specific VPN configuration.
     * @allow (create): Authenticated users can create new users within their VPN configuration, enforcing vpnConfigurationId consistency.
     * @allow (update, delete): Authenticated users can update and delete existing users within their VPN configuration.
     * @deny (create, update, delete): Non-matching vpnConfigurationId in create requests.
     * @principle Enforces document ownership for writes; Authenticated users can manage their users; Validates relational integrity.
     */
    match /vpn_configurations/{vpnConfigurationId}/users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.vpnConfigurationId == vpnConfigurationId && request.resource.data.id == userId;
      allow update: if isSignedIn() && resource.data.vpnConfigurationId == vpnConfigurationId && resource.data.id == userId;
      allow delete: if isSignedIn() && resource.data.vpnConfigurationId == vpnConfigurationId && resource != null;
    }

    /**
     * @description Allows read access to all server settings and write access only to authenticated users.
     * @path /server_settings/{serverSettingId}
     * @allow (get, list): Any user can read server settings.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete server settings.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete server settings.
     * @principle Allows read access to all server settings and write access only to authenticated users.
     */
    match /server_settings/{serverSettingId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}