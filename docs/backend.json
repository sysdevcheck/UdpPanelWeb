{
  "entities": {
    "VpsConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VpsConfiguration",
      "type": "object",
      "description": "Represents the entire VPS configuration stored in the JSON file.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the VPS configuration. This could be a hash of the config or a generated UUID."
        },
        "configurationData": {
          "type": "string",
          "description": "A string representation of the JSON configuration data."
        },
        "lastUpdated": {
          "type": "string",
          "description": "Timestamp of the last update to the configuration.",
          "format": "date-time"
        },
        "serverDetails": {
          "type": "string",
          "description": "Reference to ServerDetails. (Relationship: ServerDetails 1:1 VpsConfiguration)"
        }
      },
      "required": [
        "id",
        "configurationData",
        "lastUpdated",
        "serverDetails"
      ]
    },
    "ServerDetails": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ServerDetails",
      "type": "object",
      "description": "Represents the server details where the configuration file resides.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the server details."
        },
        "serverName": {
          "type": "string",
          "description": "The name of the server (e.g., 'default', 'production')."
        },
        "serverAddress": {
          "type": "string",
          "description": "The IP address or hostname of the server.",
          "format": "uri"
        },
        "filePath": {
          "type": "string",
          "description": "The file path to the JSON configuration file on the server (e.g., '/etc/zivpn/config.json')."
        }
      },
      "required": [
        "id",
        "serverName",
        "serverAddress",
        "filePath"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/serverDetails/{serverDetailId}",
        "definition": {
          "entityName": "ServerDetails",
          "schema": {
            "$ref": "#/backend/entities/ServerDetails"
          },
          "description": "Stores server details. Includes denormalized 'members' map for authorization independence. The 'members' map contains user IDs as keys and their roles (e.g., 'editor', 'viewer') as values.",
          "params": [
            {
              "name": "serverDetailId",
              "description": "Unique identifier for the server details document."
            }
          ]
        }
      },
      {
        "path": "/serverDetails/{serverDetailId}/vpsConfigurations/{vpsConfigurationId}",
        "definition": {
          "entityName": "VpsConfiguration",
          "schema": {
            "$ref": "#/backend/entities/VpsConfiguration"
          },
          "description": "Stores VPS configurations for a specific server.  Includes denormalized 'members' map for authorization independence. The 'members' map contains user IDs as keys and their roles (e.g., 'editor', 'viewer') as values.  Also denormalizes serverDetails.id to ensure authorization independence.",
          "params": [
            {
              "name": "serverDetailId",
              "description": "Unique identifier for the server details document."
            },
            {
              "name": "vpsConfigurationId",
              "description": "Unique identifier for the VPS configuration document."
            }
          ]
        }
      }
    ],
    "reasoning": "The data structure prioritizes authorization independence and QAPs (Rules are not filters). ServerDetails and VpsConfiguration are stored as separate collections, enabling more scalable queries and simpler security rules. Since server details are crucial for determining which configurations a user can access, serverDetails are stored independently. This design eliminates the need for complex `get()` calls in security rules, enhancing atomicity and simplifying debugging.\n\nTo achieve authorization independence, access control information (e.g., a list of authorized users) would need to be stored (denormalized) directly within the `serverDetails` documents. If different users need different levels of access to different VPS configurations on the same server, the `vpsConfigurations` collection will require a `members` map to achieve authorization independence. This denormalization enables secure and efficient `list` operations, ensuring QAPs are met. Because the application requires automatic saving to a default server, the `serverDetails` collection may require additional access controls to restrict writes to authorized users. Alternatively, the 'default' server can be hardcoded and checked in a rule using `allow write: if request.resource.data.serverName == 'default'`, but this approach does not scale well if more 'default' server names are to be added in the future."
  }
}